// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id String @id @default(uuid()) @db.Char(36)

  slug        String   @unique @db.VarChar(255)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  date        DateTime
  view_path   String   @db.VarChar(255)
  view_data   Json     @default("{}")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  event_guests EventGuest[]

  @@map("events")
}

model EventGuest {
  id       Int    @id @default(autoincrement()) @db.UnsignedInt
  event_id String @db.Char(36)
  guest_id String @db.Char(36)

  number_of_attendees Int     @default(1) @db.UnsignedInt
  view_path           String? @db.VarChar(255)
  view_data           Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  event    Event     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  guest    Guest     @relation(fields: [guest_id], references: [id], onDelete: Cascade)
  presence Presence?

  @@map("event_guest")
}

model Guest {
  id String @id @default(uuid()) @db.Char(36)

  slug         String  @unique @db.VarChar(255)
  name         String  @db.VarChar(255)
  domicile     String  @db.VarChar(255)
  phone_number String? @db.VarChar(255)
  description  String? @db.Text

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  event_guests EventGuest[]
  messages     Message[]

  @@map("guests")
}

model Message {
  id       String @id @default(uuid()) @db.Char(36)
  guest_id String @db.Char(36)

  name                        String         @db.VarChar(255)
  description                 String         @db.Text
  presence_possibility_status PresenceStatus

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  guest Guest @relation(fields: [guest_id], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Presence {
  id             String @id @default(uuid()) @db.Char(36)
  event_guest_id Int    @unique @db.UnsignedInt

  presence_status PresenceStatus

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  event_guest EventGuest @relation(fields: [event_guest_id], references: [id], onDelete: Cascade)

  @@map("presences")
}

enum PresenceStatus {
  yes
  no
  maybe
}
